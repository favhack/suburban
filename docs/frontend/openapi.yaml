openapi: 3.0.3
info:
  title: Kartičky pro autisty
  description: |-
    Kartičky pro autisty projekt na hackathonu 2024
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: image
    description: obrazky pouzite pro komunikaci
  - name: user
    description: uzivatele aplikace - deti, ucitele, asistenti
  - name: group
    description: skupiny uzivatelu kolem ditete
  - name: tag
    description: tagy pro obrazky
  - name: schedule
    description: rozvrh grupy (ditete)
paths:
  /image:
    post:
      tags:
        - image
      summary: Nahraje to obrazek
      description: Nahraje obrazek z filesystemu do aplikace
      operationId: upload_image
      requestBody:
        description: Nazev souboru, base64 buffer souboru a grupa, ktere obrazek prislusi
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUpload'
        required: true
      responses:
        '200':
          description: Obrazek nahran
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploaded'          
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
  /image/sync:
      post:
          tags:
            - image
          summary: Stahne vsechny obrazky a tagy, ktere uzivatel nema u sebe lokalne
          operationId: sync_images_tags
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ImageSync'
            required: true
          responses:
            '200':
              description: Obrazek nahran
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ImageTagSync'          
            '400':
              description: Invalid request body
            '401':
              description: Unauthorized
          
    
          
  /image/{imageId}:
    delete:
      tags:
        - image
      summary: Smaze obrazek
      description: Smaze obrazek z db
      operationId: delete_image
      parameters:
          - name: imageId
            in: path
            description: id obrazku, ktery se ma smazat
            required: true
            schema:
              type: integer
              format: int64
      responses:
        '200':
          description: Obrazek smazan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDeleted'          
        
        '401':
          description: Unauthorized
          
    get:
      tags:
        - image
      summary: Dotahne obrazek
      operationId: get_image
      parameters:
          - name: imageId
            in: path
            description: id obrazku, ktery se ma smazat
            required: true
            schema:
              type: integer
              format: int64
      responses:
        '200':
          description: Obrazek nalezen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'          
        
        '401':
          description: Unauthorized
        '404':
          description: Obrazek nemam
  
  /image/generate:
    post:
      tags:
        - image
      summary: Vygeneruje obrazek
      description: Vygeneruje obrazek pomoci AI a ulozi do db
      operationId: generate_image
      responses:
        '200':
          description: Obrazek smazan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'          
        
        '401':
          description: Unauthorized
          
  /group:
    post:
      tags:
        - group
      summary: Zalozi grupu
      description: Vygeneruje obrazek pomoci AI a ulozi do db
      operationId: create_group
      requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateGroup'
            required: true
      responses:
        '200':
          description: Vytvorena skupina
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreated'          
        
        '401':
          description: Unauthorized
  /tag:
    post:
      tags:
        - tag
      summary: Vytvori tag
      description: Zalozi tag pro uzivatele
      requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateTag'
            required: true
      responses:
        '200':
          description: Vytvorena skupina
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreated'  
        '401':
          description: Unauthorized
    
  
  /schedule/{groupId}:
    get:
      tags:
        - schedule
      summary: vytahne vsechny rozvrhy dane skupiny
      parameters:
          - name: groupId
            in: path
            description: id skupiny, jejiz rozvrhy dotahujeme
            required: true
            schema:
              type: integer
              format: int64
      responses:
        '200':
          description: Vytvorena skupina
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedules'  
        '401':
          description: Unauthorized
        '404':
          description: Nenalezen zadny rozvrh pro skupinu {groupId}
          
  /schedule/{scheduleId}:
    get:
      tags:
        - schedule
      summary: vytahne vsechny rozvrhy dane skupiny
      parameters:
          - name: scheduleId
            in: path
            description: id rozvrhu, ktery dotahujeme
            required: true
            schema:
              type: integer
              format: int64
      responses:
        '200':
          description: Vytvorena skupina
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'  
        '401':
          description: Unauthorized
        '404':
          description: Nenalezen zadny rozvrh pro skupinu {groupId}
      
    
  /schedule:
    post:
      tags:
        - schedule
      summary: Vytvori rozvrh
      description: Vytvori rozvrh pro danou grupu
      requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateSchedule'
            required: true
      responses:
        '200':
          description: Rozvrh vytvoren
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleCreated'  
        '401':
          description: Unauthorized
        '400':
          description: Nenalezen zadny rozvrh pro skupinu {groupId}
    
      
          
  /group/{groupId}/member:
    post:
        tags:
          - group
        summary: Prida uzivatele do skupiny {groupId}
        description: Prida uzivatele do grupy
        operationId: add_member
        parameters:
          - name: groupId
            in: path
            description: id grupy, ktera se ma smazat
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/AddGroupUser'
              required: true
        
        responses:
          '200':
            description: Uzivatel pridat do skupiny
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserGroupAdd'          
          '404':
            description: group doesnt exist
          '401':
            description: Unauthorized
    
        
   
 
components:
  schemas:
    ImageUpload:
      type: object
      properties:
        filename:
          type: string
          example: "hello_world.png"
        buffer:
          type: string
          format: "base64"
          example: "JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9DcmVhdG9yIChDaHJvbWl1bSkKL1Byb2R1Y2VyIChTa2lhL1BERiBtMTExKQovQ3JlYXRpb25EYXRlIChEO"
        groupId:
          type: integer
          format: int64
          example: 
    
    ImageSync:
      type: object
      properties:
        groupId:
          type: integer
          format: int64
          example: 5
        fileIds:
          type: array
          items:
            type: integer
            format: int64
            example: [1,2,5]
        tags:
          type: array
          items:
            type: integer
            format: int64
            example: [1,4,2]
    
    
    CreateTag:
      type: object
      properties:
        name:
          type: string
          example: "kocka"
    
    CreateGroup:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          example: 5
        groupName:
          type: string
          example: "cool skupina"
    
    GroupCreated:
      type: object
      properties:
        message:
          type: string
          example: "skupina s nazvem {name} vytvorena"
          
    UserGroupAdd:
      type: object
      properties:
        message:
          type: string
          example: "User with email: {email} added to group: {groupId}."
    
    AddGroupUser:
      type: object
      properties:
        userEmail:
          type: string
          format: email
          example: "ahoj@cauky.cz"
        groupId:
          type: integer
          format: int64
          example: 1
    
    
    ImageTagSync:
        type: object
        properties:
          images:
            type: array
            items:
              $ref: '#/components/schemas/Image' 
          tags:
            type: array
            items:
              $ref: '#/components/schemas/Tag' 
              
    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        name:
          type: string
          example: "kocka"
    
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        filename:
          type: string
          example: "hello_world.png"
        buffer:
          type: string
          format: "base64"
          example: "JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9DcmVhdG9yIChDaHJvbWl1bSkKL1Byb2R1Y2VyIChTa2lhL1BERiBtMTExKQovQ3JlYXRpb25EYXRlIChEO"
        groupId:
          type: integer
          format: int64
          example: 1
          
    ImageUploaded:
      type: object
      properties:
        message:
          type: string
          example: "file {filename} uploaded."
          
    ImageDeleted:
      type: object
      properties:
        message:
          type: string
          example: "file {filename} deleted."
          
          
    Schedule:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        groupId:
          type: integer
          format: int64
          example: 2
        activitiy:
          type: string
          example: "5,2,4,3,12"
    
    Schedules:
      type: array
      items:
        $ref: '#/components/schemas/Schedule'
        
    CreateSchedule:
      type: object
      properties:
        groupId:
          type: integer
          format: int64
          example: 1
        activity:
          type: array
          items:
            type: string
            example: "1,3,5,6"
    
    ScheduleCreated:
      type: object
      properties:
        message:
          type: string
          example: "Group with {group_name} created."
          
    